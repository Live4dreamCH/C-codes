/*
孪生素数是指间隔为 2 的相邻素数，例如最小的孪生素数是3和5，5和7也是。输入N找出2-N之间的孪生素数的个数。

输入：N

输出：个数

样例：

10

2
*/
#include<stdio.h>
int su(int n)
{
	int i;
	if (n == 1)
		return 0;
	for (i = 2; i < n; i++)
	{
		if (n%i == 0)
		{
			return 0;
			break;
		}
	}
	if (i == n)
	{
		return 1;
	}
}
int main()
{
	int k, in, out=0;
	scanf("%d", &in);
	for (k = 3; k <= in - 2; k++)
	{
		if (su(k) + su(k + 2) == 2 && su(k + 1) == 0)
			out++;
	}
	printf("%d", out);
	return 0;
}



/*
叛逆期的小明什么都喜欢反着做，连看数字也是如此（负号除外），比如：
小明会把1234它看成4321；把-1234看成-4321；把230看成032 (032=32)；把-230看成-032(-032=-32)。
现在，小明做了一些a+b和a-b的题目(a, b为整数且不含前导0)，如果给你这些题目正确的答案，你能猜出小明会做得到什么答案吗？
输入：
两个整数x,y(-1000000 < = x, y < =1000000), x表示a+b的正确答案，y表示a-b的正确答案。
输入保证合法，且不需考虑a或b是小数的情况。
输出：
输出两个整数s t，之间用一个空格分开，其中s表示小明将得到的a+b答案，t表示小明将得到的a-b答案。
样例：
20 6
38 24
a=x+y)/2=13
b=x-y)/2=7
r0=3 r1=1 i=2
*/
#include<stdio.h>
int re(int in)
{
	int r[100] = { 0 }, i, n = 0, k = 1, d;
	for (i=0; in != 0; i++)
	{
		r[i] = in % 10;
		in = in / 10;
	}
	d = i - 1;
	for (i =d; i >= 0; i--)
	{
		n =n+ k*r[i];
		k *= 10;
	}
	return n;
}
int main()
{
	int x, y, a, b, s, t;
	scanf("%d %d", &x, &y);
	a = (x + y) / 2;
	b = (x - y) / 2;
	a = re(a);
	b = re(b);
	s = a + b;
	t = a - b;
	printf("%d %d", s, t);
	return 0;
}



/*
编写函数，寻找具有n个元素的一维数组中的最大值和最小值，并返回数组元素的平均值，函数原形如下：
double fun(int a[],int n,int *max,int *min);
如输入：
5
2 4 5 3 1
则输出为：
5
1
3.000000
*/
#include<stdio.h>
int main()
{
	int x, a[100], i, max, min;
	float pj = 0;
	scanf("%d", &x);
	for (i = 0; i < x; i++)
	{
		scanf("%d", &a[i]);
		pj += a[i];
		if (i == 0)
		{
			max = a[0];
			min = a[0];
		}
		else if (a[i] > max)
			max = a[i];
		else if (a[i] < min)
			min = a[i];
	}
	pj /= x;
	printf("%d\n%d\n%f", max, min, pj);
}



/*
编写函数，将一个二进制数（以字符串形式表示）转换为十进制数。函数原型如下：
double binTodec(char *str);
其中str为接收的二进制数，函数的返回值为对应的十进制数。
如输入：
1010
则输出为：
10
又如输入：
100
则输出为：
4
*/
#include<stdio.h>
#include<string.h>
int ex(char str[])
{
	int i, s=0,k=1;
	for (i = strlen(str)-1;i>=0; i--)
	{
		s += k * (str[i] - '0');
		k *= 2;
	}
	return s;
}
int main()
{
	char str[100];
	gets(str);
	printf("%d", ex(str));
}



/*
编写函数，去掉一个字符串（长度不超过80）中除头部和尾部空格外的所有空格，
并编写主函数进行调用测试（即返回去掉空格后的字符串。）。
*/
#include<stdio.h>
#include<string.h>
void move(char str[],int n)
{
	unsigned i;
	for (i = n; i < strlen(str); i++)
	{
		str[i] = str[i + 1];
	}
}
void dlt(char str[])
{
	unsigned i,k;
	for(i=0;str[i]==' ';i++)
	{ }

	k = strlen(str) - 1;
	while (str[k] == ' ')
		k--;
	for (; i <=k ; i++)
	{
		if (str[i] == ' ')
		{
			move(str, i);
			i--;
			k--;
		}
	}
}
int main()
{
	char str[80];
	gets(str);
	dlt(str);
	puts(str);
}



/*
从键盘输入奇数个整型数（大于3），对该整数序列按如下规则排序：最大值排在中间，最小值排在最左，中值排在最右，其它值清为0。
输以空格隔开
定义排序函数原型为：void booble(int *array,int n);
运行样例如下所示：
输入
5
1 2 3 4 5
输出
1 0 5 0 3
*/
#include<stdio.h>
void line(int a[], int n)
{
	int i, k, c;
	for (k = 0; k < n - 1; k++)
	{
		for (i = 0; i < n - 1; i++)
		{
			if (a[i] > a[i + 1])
			{
				c = a[i];
				a[i] = a[i + 1];
				a[i + 1] = c;
			}
		}
	}
	c = a[n - 1];
	a[n - 1] = a[n / 2];
	a[n / 2] = c;
	for (i = 1; i < n-1; i++)
	{
		if (i != n / 2)
			a[i] = 0;
	}
}
int main()
{
	int a[100], i,n;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf("%d", &a[i]);
	}
	line(a, n);
	printf("%d", a[0]);
	for (i = 1; i < n; i++)
	{
		printf(" %d", a[i]);
	}
	return 0;
}



/*
Ackermann函数ack(m,n)采用以下递归式定义：
ack(0,n)=n+1
ack(m,0)=ack(m-1,1)
ack(m,n)=ack(m-1,ack(m,n-1))
其中，m>0,n>0
编写一个计算此函数的递归函数。
测试用例：
如输入：
1,1
则输出：
3
*/
#include<stdio.h>
int ack(int m, int n)
{
	if (m == 0 && n > 0)
		return n + 1;
	else if (m > 0 && n == 0)
		return ack(m - 1, 1);
	else
		return ack(m - 1, ack(m, n - 1));
}
int main()
{
	int m, n;
	scanf("%d,%d", &m, &n);
	printf("%d", ack(m, n));
	return 0;
}



/*

*/
#include<stdio.h>
//#include<math.h>
double xl=0,xll,fl, x = 1.5, f, f1;
double root(double eps)
{

	f = 2 * x*x*x - 4 * x*x + 3 * x - 6;
	f1 = 6 * x*x - 8 * x + 3;
	xll = xl;
	xl = x;
	x -= f / f1;
	if (f<eps&&f>(-eps) && xl - xll < eps&&xll - xl < eps)
		return xl;
	else
	{
		return root(eps);
	}
}
int main()
{
	double eps;
	scanf("%lf", &eps);
	printf("%lf", root(eps));
	return 0;
}



/*
编写函数,函数原型如下:
void fun(int n,char res[]);
函数功能是将整数n的各位数字逆序排列，存放到res字符数组中。
例如整数1035，逆序后为5301
程序测试举例，如输入：
9680200
则输出：
0020869
*/
#include<stdio.h>

void fun(int n)
{
	int l;
	int i,a[100];
	for (i = 0; n != 0; i++)
	{
		a[i] = n % 10;
		n /= 10;
	}
	l = i;
	for (i = 0; i < l; i++)
	{
		printf("%d",a[i]);
	}
}
int main()
{
	int n;
	scanf("%d", &n);
	fun(n);
	return 0;
}



/*
编写程序，按下列规则倒序输出子字符串。先输出最后的一个字符，再输出最后两个字符，再输出后面三个字符..., 最后输出整个字符串。
输入的字符串长度不超过100。
输入：一个字符串
输出：空格隔开的子字符串，用一个空格间隔。
输入输出样例如下所示：
输入：Hello
输出：o lo llo ello Hello
*/
#include<stdio.h>
#include<string.h>
void fun(char a[])
{
	int i, k, l;
	l = strlen(a) - 1;
	for (k = l; k >= 0; k--)
	{
		for (i = k; i <=l; i++)
			printf("%c", a[i]);
		if(k!=0)
			printf(" ");
	}
}
int main()
{
	char a[100];
	gets(a);
	fun(a);
	return 0;
}