/*
编写折半查找函数，函数原型：int Binserach(int *a,int n,int key);
功能：在n个元素的数组a中寻找key，若找到则返回key在数组中的下标，否则返回-1。
已知有排好序的整数数组：
int a[]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
在main函数中，使用折半查找函数，输入一个整数，查找是否在数组中，如在给出下标，否则-1
输入：
9
输出：
8
*/
#include<stdio.h>
void fun(int n,int a[])
{
	int i,s=-1;
	for (i = 0; i < 15; i++)
	{
		if (n == a[i])
			s = i;
	}
	printf("%d", s);
}
int main()
{
	int a[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 },n;
	scanf("%d", &n);
	fun(n,a);
	return 0;
}



/*
编写冒泡排序函数，函数原型：void bubblesort(int a[],int n);对n个整数升序排序。
编写选择排序函数，函数原型：void selectsort(int a[],int n);对n个整数降序排序。
编写main函数，输入10个整数，利用函数将其按升序和降序分别输出排序结果。（输入输出数据间用一个空格分隔）
测试样例：
如输入：
5 2 8 9 10 1 3 4 7 6
则输出为：
1 2 3 4 5 6 7 8 9 10
10 9 8 7 6 5 4 3 2 1
*/
#include<stdio.h>
void de(int a[])
{
	int i, k,t;
	for (k = 0; k <9 ; k++)
	{
		for (i = 0; i < 9; i++)
		{
			if (a[i] < a[i + 1])
			{
				t = a[i];
				a[i] = a[i + 1];
				a[i + 1] = t;
			}
		}
	}
	printf("%d", a[0]);
	for (i = 1; i < 10; i++)
	{
		printf(" %d", a[i]);
	}
	printf("\n");
}
void as(int a[])
{
	int i, k, t;
	for (k = 0; k < 9; k++)
	{
		for (i = 0; i < 9; i++)
		{
			if (a[i] > a[i + 1])
			{
				t = a[i];
				a[i] = a[i + 1];
				a[i + 1] = t;
			}
		}
	}
	printf("%d", a[0]);
	for (i = 1; i < 10; i++)
	{
		printf(" %d", a[i]);
	}
	printf("\n");
}
int main()
{
	int a[10],i;
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &a[i]);
	}
	as(a);
	de(a);
	return 0;
}



/*
输入一个字符串（其长度不超过81），分别统计其中26个英文字母出现的次数（不区分大、小写字母），
并按字母出现次数从高到低排序，若次数相同，按字母顺序排列。
字母输出格式举例，例如：A-3，表示字母A出现3次，C-0表示字母C没有出现。
	输入：
	第一行为输入，占一行，输入的字符串可能含有空格
	输出：
	第二行为输出，占一行。按照字母输出格式从高到低输出，各字母输出之间用一个空格字符分隔。
	样例：
	123abcAABXxwvUu+
	A-3 B-2 U-2 X-2 C-1 V-1 W-1 D-0 E-0 F-0 G-0 H-0 I-0 J-0 K-0 L-0 M-0 N-0 O-0   P-0 Q-0 R-0 S-0 T-0 Y-0 Z-0
*/
#include<stdio.h>
#include<string.h>
int main()
{
	char a[100];
	int tj[26] = {0},px[2][26];
	int i, k,n;
	gets(a);
	n = strlen(a);
	for (k = 0; k < 26; k++)
	{
		for (i = 0; i < n; i++)
		{
			if (a[i] == 'a' + k)
			{
				tj[k]++;
			}
		}
	}
	for (k = 0; k < 26; k++)
	{
		for (i = 0; i < n; i++)
		{
			if (a[i] == 'A' + k)
			{
				tj[k]++;
			}
		}
	}
	for (i = 0; i < 26; i++)
	{
		px[1][i] = tj[i];
		px[0][i] = i;
	}
	int c, t;
	for (k = 0; k < 25; k++)
	{
		for (i = 0; i < 25; i++)
		{
			if (px[1][i] < px[1][i + 1])
			{
				c = px[0][i];
				px[0][i] = px[0][i + 1];
				px[0][i + 1] = c;
				t = px[1][i];
				px[1][i] = px[1][i + 1];
				px[1][i + 1] = t;
			}
		}
	}
	for (k = 0; k < 25; k++)
	{
		for (i = 0; i < 25; i++)
		{
			if (px[1][i] == px[1][i + 1] && px[0][i] > px[0][i + 1])
			{
				c = px[0][i];
				px[0][i] = px[0][i + 1];
				px[0][i + 1] = c;
			}
		}
	}
	printf("%c-%d", px[0][0] + 'A', px[1][0]);
	for (i = 1; i < 26; i++)
	{
		printf(" %c-%d", px[0][i] + 'A', px[1][i]);
	}
	return 0;
}



/*
输入一行数字，如果我们把这行数字中的‘5’都看成空格，那么就得到一行用空格分割的若干非负整数
（可能有些整数以‘0’开头，这些头部的‘0’应该被忽略掉，除非这个整数就是由若干个‘0’组成的，这时这个整数就是0）。
你的任务是：对这些分割得到的整数，依从小到大的顺序排序输出。
输入：每组输入数据只有一行数字（数字之间没有空格），这行数字的长度不大于1000。
输入数据保证：分割得到的非负整数不会大于100000000；输入数据不可能全由‘5’组成。
输出：对于每个测试用例，输出分割得到的整数排序的结果，相邻的两个整数之间用一个空格分开，每组输出占一行。
例子：
0051231232050775
0 77 12312320
*/
#include<stdio.h>
#include<string.h>
int main()
{
	int  i, pst[1000], k, rst[1000] = { 0 },t,n;
	char sr[1000];
	gets(sr);
	n = strlen(sr);
	for (i = 0; i < n; i++)
	{
		if (sr[i] == '5')
			pst[i] = 0;
		else
			pst[i] = 1;
	}
	i = n - 1;
	for (k = 0;i>=0&&k<1000; k++)
	{
		t = 1;
		for (;pst[i]==1&&i>=0; i--)
		{
			rst[k] += t*(sr[i]-'0');
			t *= 10;
		}
		while (pst[i] == 0&&i>=0)
			i--;
	}
	n = k;
	for (k = 0; k < n - 1; k++)
	{
		for (i = 0; i < n - 1; i++)
		{
			if (rst[i] > rst[i + 1])
			{
				t = rst[i];
				rst[i] = rst[i + 1];
				rst[i + 1] = t;
			}
		}
	}
	for (i = 0;rst[i]==0&&rst[i+1]==0; i++)
	{
		for (k = i + 1; k < n; k++)
		{
			rst[k] = rst[k + 1];
		}
		n--;
	}
	printf("%d", rst[0]);
	for (i = 1;i<n; i++)
		printf(" %d", rst[i]);
	return 0;
}



/*
改进冒泡排序程序，使其当数据已经有序时，直接结束排序过程。函数原型：
void Bubble(int *a,int n);//对n个整数从小到大排序
在主函数中调用Bubble对键盘输入的m个整数进行排序并输出。其中m个元素的整型数组p可以动态申请，
如 int *p=(int *)calloc(m,sizeof(int));
测试样例如下：
如输入：
10
87 66 92 85 62 77 95 100 89 73
则输出为：
62 66 73 77 85 87 89 92 95 100
*/
#include<stdio.h>
#include<string.h>
void bubble(int m,int a[])
{
	int i, k=0,t;
	for (i = 0; i < m-1; i++)
	{
		if (a[i] < a[i + 1]|| a[i] == a[i + 1])
			k++;
	}
	if (k != m - 1)
	{
		for (k = 0; k < m - 1; k++)
		{
			for (i = 0; i < m - 1; i++)
			{
				if (a[i] > a[i + 1])
				{
					t = a[i];
					a[i] = a[i + 1];
					a[i + 1] = t;
				}
			}
		}
	}
}
int main()
{
	int m, *a,i;
	scanf("%d", &m);
	a = (int *)calloc(m, sizeof(int));
	for (i = 0; i < m; i++)
	{
		scanf("%d", &a[i]);
	}
	bubble(m, a);
	printf("%d", a[0]);
	for (i = 1; i < m; i++)
	{
		printf(" %d", a[i]);
	}
	return 0;
}



/*

Given N rational numbers in the form "numerator/denominator", you are supposed to calculate their sum. 



Input Specification: Each input file contains one test case. Each case starts with a positive integer N (<=100), followed in the next line N rational numbers "a1/b1 a2/b2 ..." where all the numerators and denominators are in the range of "long int". If there is a negative number, then the sign must appear in front of the numerator. 



Output Specification: For each test case, output the sum in the simplest form "integer numerator/denominator" where "integer" is the integer part of the sum, "numerator" < "denominator", and the numerator and the denominator have no common factor. You must output only the fractional part if the integer part is 0. 



Sample Input 1: 



5



2/5



4/15



1/30



-1/30



8/3



Sample Output 1: 



3 1/3



Sample Input 2: 



2



4/3



2/3



Sample Output 2: 



2



Sample Input 3: 



3



1/3



-1/6



1/8



Sample Output 3: 



7/24
*/

/*
5
2/5
4/15
1/30
-1/30
8/3
*/
#include<stdio.h>
#include<string.h>
void hj(int m,int a[],int b[])
{
	int i, k=0, t;
	for (i = 2;k!=m; i++)
	{
		for (k = 0;i%b[k]==0&&k<m; k++)
		{
			
		}
	}
	t=i-1;
	k = 0;
	for (i = 0; i < m; i++)
	{
		a[i] *= t / b[i];
		k += a[i];
	}
	if (k%t == 0)
		printf("%d", k/t);
	else if (k/t!=0)
	{
		printf("%d ", k / t);
		k %= t;
		for (i = 2;i<=k; i++)
		{
			while (k%i == 0 && t%i == 0)
			{
				k /= i;
				t /= i;
			}
		}
		printf("%d/%d", k, t);
	}
	else
	{
		for (i = 2; i <= k; i++)
		{
			while (k%i == 0 && t%i == 0)
			{
				k /= i;
				t /= i;
			}
		}
		printf("%d/%d", k, t);
	}
}
int main()
{
	int m, *a,*b,i;
	scanf("%d", &m);
	a = (int *)calloc(m, sizeof(int));
	b = (int *)calloc(m, sizeof(int));
	for (i = 0; i < m; i++)
	{
		scanf("%d/%d", &a[i],&b[i]);
	}
	hj(m, a,b);
	return 0;
}



