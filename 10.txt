/*
从键盘输入奇数个整型数（大于3），对该整数序列按如下规则排序：最大值排在中间，最小值排在最左，中值排在最右，其它值清为0。
输以空格隔开
定义排序函数原型为：void booble(int *array,int n);
运行样例如下所示：
输入
5
1 2 3 4 5
输出
1 0 5 0 3
*/
#include<stdio.h>
void line(int a[], int n)
{
	int i, k, c;
	for (k = 0; k < n - 1; k++)
	{
		for (i = 0; i < n - 1; i++)
		{
			if (a[i] > a[i + 1])
			{
				c = a[i];
				a[i] = a[i + 1];
				a[i + 1] = c;
			}
		}
	}
	c = a[n - 1];
	a[n - 1] = a[n / 2];
	a[n / 2] = c;
	for (i = 1; i < n-1; i++)
	{
		if (i != n / 2)
			a[i] = 0;
	}
}
int main()
{
	int a[100], i,n;
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf("%d", &a[i]);
	}
	line(a, n);
	printf("%d", a[0]);
	for (i = 1; i < n; i++)
	{
		printf(" %d", a[i]);
	}
	return 0;
}



/*有一个包含奇数个项的整数序列，请编程按照以下规则排序：最大值排在中间，最小值排在最左，中值排在最右，其它值清为0。
输入2行，第一行n表示要输入的数的个数，n是奇数。第二行输入的n个数。
输出，排序后的数组，数据空格分隔，最后一个数据后面没有空格。
样例：
5
12 20 9 88 32
9 0 88 0 20
*/
#include <stdio.h>
void px(int n, int a[])
{
	int i, k, t;
	for (k = 0; k < n-1; k++)
	{
		for (i = 0; i < n - 1; i++)
		{
			if (a[i] > a[i + 1])
			{
				t = a[i];
				a[i] = a[i + 1];
				a[i + 1] = t;
			}
		}
	}
}
int main()
{
	int n, i, *a;
	scanf("%d", &n);
	a = (int *)calloc(n+1, sizeof(int));
	for (i = 0; i < n + 1; i++)
	{
		scanf("%d", &a[i]);
	}
	px(n + 1, a);
	printf("%d", a[0]);
	for (i = 1; i < n + 1; i++)
	{
		printf(" %d",a[i]);
	}
}



/*
编写一个函数，从传入的一个字符串中找出一个最长的一个子字符串， 输出该子字符串。假设各个子串以回车作为结束符，空格为分隔符。
输入：
Life is not a problem to be solved but a reality to be experienced
输出：
experienced
*/
#include<stdio.h>
#include<string.h>
int main()
{
	int i,k=0,j=0,max=0,l;
	char a[20][20],in[100];
	gets(in);
	for (i = 0;in[i]!=0; i++)
	{
		if (in[i] != ' ')
		{
			a[k][j] = in[i];
			j++;
		}
		else
		{
			a[k][j] = 0;
			k++;
			j = 0;
		}
	}
	a[k][j] = 0;
	for (i = 0; i < k + 1; i++)
	{
		l=strlen(a[i]);
		if (max < l)
		{
			max = l;
			j = i;
		}
	}
	puts(a[j]);
}



/*
某部队进行新兵队列训练，将新兵从1开始按顺序依次编号，并排成一行横队，训练的规则如下：
从头开始1至2报数，凡报到2的出列，剩下的向小序号方向靠拢，
再从头开始进行1至3报数，凡报到3的出列，剩下的向小序号方向靠拢，
继续从头开始进行1至2报数，
以后从头开始轮流进行1至2报数、1至3报数直到剩下的人数不超过三人为止。
编写程序，输入数N为最开始的新兵人数（20 < N < 6000），输出剩下的新兵最初的编号。
样例：
21
1 7 19
*/
#include<stdio.h>
int main()
{
	int n, *a, i,k,t=4,j;
	scanf("%d", &n);
	a = (int *)calloc(n+1, sizeof(int));
	for (i = 0; i < n + 1; i++)
	{
		a[i] = i;
	}
	for (k = 1;t>3; k++)
	{
		j = 0;
		if (k % 2 == 1)
		{
			for (i = 1;i<n+1; i++)
			{
				if (a[i] != 0)
					j++;
				if (j % 2 == 0)
					a[i] = 0;
			}
		}
		else
		{
			for (i = 1; i < n + 1; i++)
			{
				if (a[i] != 0)
					j++;
				if (j % 3 == 0)
					a[i] = 0;
			}
		}
		t = 0;
		for (i = 1; i < n + 1; i++)
		{

			if (a[i] != 0)
				t++;
		}
	}
	printf("1");
	for (i = 2; i < n + 1; i++)
	{
		if(a[i]!=0)
		printf(" %d", a[i]);
	}
}



/*
At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in's and out's, you are supposed to find the ones who have unlocked and locked the door on that day. 



Input Specification: 

Each input contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format: ID_number Sign_in_time Sign_out_time where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters. 





Output Specification: 

For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space. Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment. 



Sample Input: 



3

CS301111 15:30:28 17:00:10 

SC3021234 08:00:00 11:25:25 

CS301133 21:45:00 21:58:40 



Sample Output: 



SC3021234 CS301133
*/
#include<stdio.h>
#include <string.h>
int main()
{
    char id_num[16], max_id_num[16], min_id_num[16];
    char in_time[16], out_time[16], min_in_time[16], max_out_time[16];
    int total, loop;
    scanf("%d", &total);
    char ch;
    int is_first = 1;
    for (loop = 0; loop < total; loop++)
    {
    
        scanf("%s %s %s", id_num, in_time, out_time);
        if (is_first)
        {
            strcpy(max_id_num, id_num);
            strcpy(min_id_num, id_num);
            strcpy(max_out_time, out_time);
            strcpy(min_in_time, in_time);
            is_first = 0;
        }
        else
        {
            if (strcmp(max_out_time, out_time) < 0)
            {
                strcpy(max_out_time, out_time);
                strcpy(max_id_num, id_num);
            }
            if (strcmp(min_in_time, in_time) > 0)
            {
                strcpy(min_in_time, in_time);
                strcpy(min_id_num, id_num);
            }
        }
    }
    printf("%s %s\n", min_id_num, max_id_num);
    return 0;
}




/*
给定一个k整数序列n1，n2，…，nk。连续子序列定义为ni，ni+1，…，nj，其中1<=i<=j<=k。
最大子序列是具有最大元素和的连续子序列。例如，给定序列-2，11，-4，13，-5，-2，其最大子序列为11，-4，13，最大和为20。
现在，您应该找到最大的和，以及最大子序列的第一个和最后一个数字。
*/
#include<stdio.h>
int main()
{
	int n, i, first, last, max=0, t=0,k,*a,j;
	scanf("%d", &n);
	a = (int *)calloc(n, sizeof(int));
	for(i=0;i<n;i++)
	{
		scanf("%d", &a[i]);
	}
	for (i = 0; i < n; i++)//起始点
	{
		if (a[i] >= 0)
		{
			for (j = 0; j + i < n; j++)//长度
			{
				if (a[j + i] > 0)
				{
					for (k = i, t = 0; k <= i + j; k++)//遍历求和
					{
						t += a[k];
					}
					if (t > max)
					{
						first = i;
						last = i + j;
						max = t;
					}
				}
			}
		}
	}
	if (max == 0)
	{
		first = a[0];
		last = a[n - 1];
	}
	printf("%d %d %d", max, first, last);
}



/*
有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 数据输入： 输入表示若干种石子的初始情况，包含两个非负整数 a 和 b ，表示两堆石子的数目， a 和 b 都不大于 1,000,000,000 。 数据输出： 包含一个数字 1 或 0 ，如果最后你是胜者，则为 1 ，反之，则为 0 。 



样例： 



2 1 

0

*/
#include<stdio.h>
#include<math.h>
int main()
{	
  int a, b, k, temp;
	scanf("%d%d", &a, &b);
		if (a < b)
		{
			temp = a;
			a = b;
			b = temp;
		}
		k = a - b;
		a = (int)(k*(1 + sqrt(5)) / 2.0);
		if (a == b)
			printf("0");
		else
			printf("1");
	return 0;
}



