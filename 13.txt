/*
输入规格：
每个输入文件包含一个测试用例。
每种情况都由两个非负数n和b组成，其中0<=n<=10^9是十进制数，2<=b<=10^9是基数。数字之间用空格隔开。
输出规格：
对于每个测试用例，如果n是以b为基数的回文数，则在一行中首先打印“是”，否则打印“否”。
然后在下一行中，以“AK AK-1…”的形式将n作为基数b中的数字打印出来。“A0”。请注意，输出结束时不能有额外的空间。
样本输入1：
27 2
样本输出1：
是的
1 1 0 0 1 1
样本输入2：
121 5
样本输出2：
不
4 4 1

*/
#include<stdio.h>
#include<string.h>
int main()
{
	int n, b,w[31],i,l;
	scanf("%d %d",&n, &b);
	if (n == 0)
		printf("Yes\n0");
	else
	{
		for (i = 0; n > 0; i++)
		{
			w[i] = n % b;
			n /= b;
		}
		l = i;
		for (i = 0; i < l; i++)
		{
			if (w[i] != w[l - i - 1])
				break;
		}
		if (i == l)
			printf("Yes\n");
		else
			printf("No\n");
		printf("%d", w[l - 1]);
		for (i = l - 2; i >= 0; i--)
		{
			printf(" %d", w[i]);
		}
	}
}



/*
输入任意长度的字符串，分别统计其中大写字母，小写字母，数字字符及其它字符的个数并输出统计结果，再按统计值从多到少依次输出。
提示：测试用例输出的冒号是中文冒号。
大写字母：4
小写字母：5
数字字符：2
其它字符：5
从多到少依次输出如下：
小写字母：5
其它字符：5
大写字母：4
数字字符：2
*/
#include<stdio.h>
#include<string.h>
int main()
{
	int i, r[4] = { 0 }, l, t;
	char a[100], c[][11] = { "大写字母：","小写字母：","数字字符：","其它字符：" };
	gets(a);
	l = strlen(a);
	for (i = 0; i < l; i++)
	{
		if (a[i] >= 'A'&&a[i] <= 'Z')
			r[0]++;
		else if (a[i] >= 'a'&&a[i] <= 'z')
			r[1]++;
		else if (a[i] >= '0'&&a[i] <= '9')
			r[2]++;
		else
			r[3]++;
	}
	for (i = 0; i < 4; i++)
	{
		printf("%s%d\n", c[i], r[i]);
	}
	printf("从多到少依次输出如下：\n");
	for (i = 0; i < 3; i++)
	{
		for (l = 0; l < 3; l++)
		{
			if (r[l] < r[l + 1])
			{
				t = r[l];
				r[l] = r[l + 1];
				r[l + 1] = t;
				strcpy(a, c[l]);
				strcpy(c[l], c[l + 1]);
				strcpy(c[l + 1], a);
			}
		}
	}
	for (i = 0; i < 4; i++)
	{
		printf("%s%d\n", c[i], r[i]);
	}
}



/*
输入一个英文字符串（长度<81），删除其中所有非小写字母字符，并输出删除后的字符串。
如输入：
Xi'an Jiaotong University.
则输出：
ianiaotongniversity
*/
#include<stdio.h>
#include<string.h>
int main()
{
	char a[81];
	gets(a);
	int i,l,k;
	l = strlen(a);
	for (i = 0; i < l; i++)
	{
		if (a[i]<'a' || a[i]>'z')
		{
			for (k = i; k < l; k++)
			{
				a[k] = a[k + 1];
			}
			i--;
			l--;
		}
	}
	puts(a);
}



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
/*
恺撒加密法加密规则是：将原来的小写字母用字母表中其后面的第3个字母的大写形式来替换，大写字母按同样规则用小写字母替换，
对于字母表中最后的三个字母，可将字母表看成是首未衔接的。如字母c就用F来替换，字母y用B来替换，而字母Z用c代替。
编程实现以下功能：输入一个字符串，将其加密后输出。
输入：仅含有字母的字符串
输出：加密后的字符串
样例：
输入：
AMDxyzXYZ
输出：
dpgABCabc
*/
int main()
{
	int i, n;
	char a[100];
	gets(a);
	n = strlen(a);
	for (i = 0; i < n; i++)
	{
		if (a[i] >= 'A'&&a[i] < 'X')
			a[i] += 3 + 'a' - 'A';
		else if (a[i] >= 'X'&&a[i] <= 'Z')
			a[i] += 'a' - 'A' + 3 - 26;
		else if(a[i] >= 'a'&&a[i] < 'x')
			a[i] += 3 + 'A' - 'a';
		else if (a[i] >= 'x'&&a[i] <= 'z')
			a[i] += 'A' - 'a' + 3 - 26;
	}
	puts(a);
}



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
/*
编写字符查找函数，函数原形为：



int mystrchr(char string[],char c);



功能是在字符串string中查找c中的字符，如果找到则返回该字符的索引值（即下标，否则返回-1。



编写主函数进行测试。输入一个字符串数据（长度<80)和一个字符，输出该字符的序号（从0开始）。



如输入如下：



asdffg &  *123 hjkl



f



则输出为：



3


*/
int main()
{
	int p;
	char a[80], c;
	gets(a);
	scanf("%c", &c);
	p=(int)strchr(a, c);
	if (p == 0)
		p--;
	else
		p -= (int)a;
	printf("%d", p);
}



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
/*
编写一个求数组中最小值元素及该元素位置的函数，并编写主函数调用。要求：由键盘输入10个数，并存放于整型数组中。
提示：需要定义含整型数组，最小元素值和该元素位置的结构体变量。以保证函数能同时返回最小元素值和该元素位置两个变量。
样例说明：第一行为用户输入的数组、第二行第一个数字为数组中的最小元素值，第二个数字为该元素在数组中的下标位置。
两个数用空格分开。
*/
int main()
{
	int a[10], min, p, i;
	scanf("%d", &a[0]);
	min = a[0];
	for (i = 1; i < 10; i++)
	{
		scanf("%d", &a[i]);
		if (a[i] < min)
		{
			p = i;
			min = a[i];
		}
	}
	printf("%d %d", min, p);
}


/*
Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.

Input Specification:

Each input contains one test case. Each case occupies one line which contains an N (<= 10^100).

Output Specification:

For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.

Sample Input:

12345

Sample Output:

one five

*/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
void translate(int n)
{
	int i, a[100];
	if (n == 0)
		printf("zero");
	else
	{
		for (i = 0; n != 0; i++)
		{
			a[i] = n % 10;
			n /= 10;
		}
		i--;
		switch (a[i])
		{
		case 0:printf("zero"); break;
		case 1:printf("one"); break;
		case 2:printf("two"); break;
		case 3:printf("three"); break;
		case 4:printf("four"); break;
		case 5:printf("five"); break;
		case 6:printf("six"); break;
		case 7:printf("seven"); break;
		case 8:printf("eight"); break;
		case 9:printf("nine"); break;
		}
		for (i--; i >= 0; i--)
		{
			switch (a[i])
			{
			case 0:printf(" zero"); break;
			case 1:printf(" one"); break;
			case 2:printf(" two"); break;
			case 3:printf(" three"); break;
			case 4:printf(" four"); break;
			case 5:printf(" five"); break;
			case 6:printf(" six"); break;
			case 7:printf(" seven"); break;
			case 8:printf(" eight"); break;
			case 9:printf(" nine"); break;
			}
		}
	}
}
int main()
{
	int n, s = 0;
	scanf("%d", &n);
	while (n>0)
	{
		s += n % 10;
		n /= 10;
	}
	translate(s);
}



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
/*
功能是将十进制整数n(n>=0)转换为t进制数(即2、8及16进制)，结果存放在res字符数组中。
并编写测试用的主函数。
如输入：
248,2
则输出：
11111000
如输入：
248,8
则输出：
370
如输入：
248,16
则输出：
F8
*/
int main()
{
	int n, t, i, a[100];
	scanf("%d,%d", &n, &t);
	if (t == 8)
		printf("%o", n);
	else if(t==16)
		printf("%X", n);
	else
	{
		for (i = 0; n != 0; i++)
		{
			a[i] = n % 2;
			n /= 2;
		}
		for (i--; i >= 0; i--)
		{
			printf("%d", a[i]);
		}
	}
}